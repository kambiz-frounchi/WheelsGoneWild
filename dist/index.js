const db=require("../models"),{Op,Sequelize}=require("sequelize"),passport=require("../config/passport"),isAuthenticated=require("../config/middleware/isAuthenticated");module.exports=function(a){a.post("/api/login",passport.authenticate("local"),(a,b)=>{b.json({email:a.user.email,id:a.user.id})}),a.post("/api/signup",(a,b)=>{console.log(a.user),db.User.create({email:a.body.email,password:a.body.password,firstname:a.body.firstname,lastname:a.body.lastname}).then(()=>{b.redirect(307,"/api/login")}).catch(a=>{b.status(401).json(a)})}),a.get("/api/user_data",isAuthenticated,(a,b)=>{a.user?b.json({email:a.user.email,id:a.user.id,firstname:a.user.firstname,lastname:a.user.lastname}):b.json({})}),a.post("/profile",isAuthenticated,async(a,b)=>{console.log(a.body),await db.User.update(a.body,{where:{id:a.user.id}}),b.redirect("/profile")}),a.post("/upload",async(a,b)=>{if(!a.files||0===Object.keys(a.files).length)return b.status(400).send("No files were uploaded.");const c=a.files.avatar;console.log(c),c.name="avatar.jpg",console.log(c),await c.mv("./public/avatar/"+c.name,a=>{if(a)return console.log(a),b.status(500).send(a)}),b.redirect("/profile")}),a.post("/api/orderItem",isAuthenticated,async(a,b)=>{console.log(a.body);let c=await db.Order.findOne({where:{UserId:a.user.id,state:"pending"}});const d=await db.Bike.findOne({where:{id:a.body.bikeId}});c?await db.Order.update({totalprice:c.totalprice+d.price,totalquantity:Sequelize.literal("totalquantity + 1")},{where:{id:c.id}}):c=await db.Order.create({totalprice:d.price,state:"pending",UserId:a.user.id});const e=await db.OrderItem.findOne({where:{BikeId:a.body.bikeId,Orderid:c.id}});e?(console.log(`order id: ${c.id}`),await db.OrderItem.update({quantity:++e.quantity},{where:{BikeId:a.body.bikeId,Orderid:c.id}})):await db.OrderItem.create({OrderId:c.id,BikeId:a.body.bikeId,quantity:a.body.quantity}),b.status(200).json(!0)}),a.put("/api/orderItem",isAuthenticated,async(a,b)=>{console.log(a.body),await db.OrderItem.update({quantity:Sequelize.literal("quantity - 1")},{where:{bikeId:a.body.bikeId,quantity:{[Op.gt]:0}},attributes:[db.OrderItem.quantity],include:[{model:db.Order,where:{UserId:a.user.id,state:"pending"}}]});const{price:c}=await db.Bike.findOne({raw:!0,where:{id:a.body.bikeId}});await db.Order.update({totalquantity:Sequelize.literal("totalquantity - 1"),totalprice:Sequelize.literal(`totalprice - ${c}`)},{where:{state:"pending"}}),await db.OrderItem.destroy({where:{quantity:0}}).then(a=>{console.log(a),b.status(200).json(!0)})}),a.post("/api/order",isAuthenticated,(a,b)=>{db.Order.findOne({where:{UserId:a.user.id,state:"pending"}}).then(a=>{db.Order.update({state:"ordered"},{where:{id:a.id}}).then(()=>{b.status(200).end()})})}),a.get("/api/orderItems",isAuthenticated,async(a,b)=>{const c=await db.Order.findOne({where:{UserId:a.user.id,state:"pending"}});if(c){const a=await db.OrderItem.findAll({where:{OrderId:c.id},include:[db.Bike,db.Order]});a&&b.json(a)}b.status(200).end()}),a.get("/api/orders",isAuthenticated,async(a,b)=>{const c=await db.Order.findAll({where:{state:{[Op.not]:"pending"},UserId:a.user.id}});c&&c.forEach(async a=>{const b=await db.OrderItem.findAll({where:{OrderId:a.id}});b&&console.log(b)}),b.status(200).end()}),a.delete("/api/order",isAuthenticated,(a,b)=>{console.log("test"),db.Order.destroy({where:{UserId:a.user.id}}).then(a=>{console.log(a),b.status(200).json(!0)})}),a.get("/api/bikes",(a,b)=>{}),a.get("/api/bikes/:id",(a,b)=>{}),a.get("/api/bikes/filter/featured",(a,b)=>{}),a.get("/api/bikes/filter/brand/:id",(a,b)=>{db.Bike.findAll({where:{brand:a.params.id}}).then(a=>{b.json(a)})}),a.get("/api/bikes/filter/category/:id",(a,b)=>{db.Bike.findAll({where:{category:a.params.id}}).then(a=>{console.log(a),b.json(a)})}),a.get("/api/bikes/filter/color/:id",(a,b)=>{}),a.get("/api/bikes/filter/frame_size/:id",(a,b)=>{}),a.get("/api/bikes/filter/frame_material/:id",(a,b)=>{db.Bike.findAll({where:{framematerial:a.params.id}}).then(a=>{console.log(a),b.json(a)})}),a.get("/api/bikes/filter/year/:id",(a,b)=>{db.Bike.findAll({where:{year:a.params.id}}).then(a=>{console.log(a),b.json(a)})}),a.post("/api/bikes",isAuthenticated,async(a,b)=>{if(a.user){const c=await db.User.findOne({where:{id:a.user.id}});"admin"===c.role&&(console.log(a.body.bike),db.Bike.create(a.body.bike).then(a=>{b.json(a)}))}}),a.delete("/api/bikes/:id",isAuthenticated,async(a,b)=>{if(console.log("delete"),a.user){const c=await db.User.findOne({where:{id:a.user.id}});"admin"===c.role&&(console.log(`bikeid = ${a.params.id}`),db.Bike.destroy({where:{id:a.params.id}}).then(()=>{b.status(200).end()}).catch(()=>{b.status(200).end()}))}}),a.put("/api/bikes/:id",isAuthenticated,async(a,b)=>{if(a.user){const c=await db.User.findOne({where:{id:a.user.id}});"admin"===c.role&&(console.log(`bikeid = ${a.params.id}, new price = ${a.body}`),db.Bike.update(a.body,{where:{id:a.params.id}}).then(()=>{b.status(200).end()}).catch(()=>{b.status(200).end()}))}})};